package com.example.Trade.Controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.Trade.Request.ForgetPasswordTokenRequest;
import com.example.Trade.Request.ResetPasswordRequest;
import com.example.Trade.Response.ApiResponse;
import com.example.Trade.Response.AuthResponse;
import com.example.Trade.Service.EmailService;
import com.example.Trade.Service.ForgetPasswordService;
import com.example.Trade.Service.UserService;
import com.example.Trade.Service.VerificationCodeService;
import com.example.Trade.Utils.OtpUtils;
import com.example.Trade.domain.VerificationType;
import com.example.Trade.model.ForgetPasswordToken;
import com.example.Trade.model.User;
import com.example.Trade.model.VerificationCode;

@RestController
public class UserController {

	 @Autowired
	 private UserService userService;
	
	 @Autowired
	 private EmailService emailService;
	 
	 @Autowired
	 private VerificationCodeService verificationCodeService;
	 
	 @Autowired
	 private ForgetPasswordService forgetPasswordService;
	 
	 @GetMapping("/api/users/profile")
	 public ResponseEntity<User> getUserProfileByJWT(@RequestHeader("Authorization") String jwt ){
		 User user=userService.findUserprofileByJwt(jwt);
		 return new ResponseEntity<>(user,HttpStatus.OK);
	 }
	 
	 @PostMapping("/api/users/verification/{verificationType}/send-otp")
	 public ResponseEntity<String> sendVerificationOtp(
			 @RequestHeader("Authorization") String jwt,
			 @PathVariable VerificationType verificationType) throws Exception{
		 User user=userService.findUserprofileByJwt(jwt);
		 VerificationCode verificationCode=verificationCodeService.getVerificationCodeById(user.getId());
		 if(verificationCode==null) {
			 verificationCode=verificationCodeService.sendVerificationCode(user, verificationType);
		 }
		 if(verificationType.equals(VerificationType.EMAIL)) {
			 emailService.sendVerificationOtpEmail(user.getEmail(), verificationCode.getOtp());
		 }
		
		 return new ResponseEntity<>("verification otp sent successfully",HttpStatus.OK);
	 }
	 
	 @PatchMapping("/api/users/enable-two-factor/verify-otp/{otp}")
	 public ResponseEntity<User> enableTwoFactorAuthentication(@RequestHeader("Authorization") String jwt,@PathVariable String otp ) throws Exception{
		 User user=userService.findUserprofileByJwt(jwt);
		 
		 VerificationCode verificationCode=verificationCodeService.getVerificationCodeByUser(user.getId());
		 String sendTo=verificationCode.getVerificationType().equals(VerificationType.EMAIL)?verificationCode.getEmail():verificationCode.getMobile();
		 
		 boolean isVerified=verificationCode.getOtp().equals(otp);
		 if(isVerified) {
			 User udpatedUser=userService.enableTwoFactorAuthentication(verificationCode.getVerificationType(), sendTo, user);
			 verificationCodeService.deleteVerificationCode(verificationCode);
			 return new ResponseEntity<>(udpatedUser,HttpStatus.OK);
		 }
		 throw new Exception("wrong otp");
	 }
	
	 
	 @PostMapping("/auth/users/reset-password/send-otp")
	 public ResponseEntity<AuthResponse> sendForgetPasswordOtp(
			
			 @RequestBody ForgetPasswordTokenRequest request) throws Exception{
		 User user=userService.findUserProfileByEmail(request.getSendTo());
		 
		 String otp=OtpUtils.generateOtp();
		 UUID uuid=UUID.randomUUID();
		 String id=uuid.toString();
		 
		 ForgetPasswordToken token=forgetPasswordService.findByUser(user.getId());
		 if(token==null) {
			 token=forgetPasswordService.createToken(user, id, otp,request.getVerificationType(),request.getSendTo());
		 }
		 
		 if(request.getVerificationType().equals(VerificationType.EMAIL)) {
			 emailService.sendVerificationOtpEmail(user.getEmail(),token.getOtp());
		 }
		 AuthResponse response=new AuthResponse();
		 response.setSession(token.getId());
		 response.setMessage("Password reset otp send successfully");
		
		 return new ResponseEntity<>(response,HttpStatus.OK);
	 }
	 
	 
	 @PatchMapping("/auth/users/reset-password/verify-otp")
	 public ResponseEntity<ApiResponse> resetPassword(
			 @RequestParam String id,
			 @RequestBody ResetPasswordRequest req,
			 @RequestHeader("Authorization") String jwt ) throws Exception{
		 
		 
		 ForgetPasswordToken forgetPasswordToken=forgetPasswordService.findById(id);
		
		 boolean isVerified=forgetPasswordToken.getOtp().equals(req.getOtp());
		 
		 if(isVerified) {
			 userService.updatePassword(forgetPasswordToken.getUser(), req.getPassword());
			 
			 ApiResponse res=new ApiResponse();
			 res.setMessage("password update successfully..");
			 return new ResponseEntity<>(res,HttpStatus.ACCEPTED);
		 }
		 
		 return null;
		 
		 
		 
	 }
	
	 
	 
	
}
